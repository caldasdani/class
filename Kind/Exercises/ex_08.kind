// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
  case xs{
    nil: Maybe.none<A>
    cons: Maybe.some<A>(xs.head)
  }
// ex_08:_
// let List = [5, 6, 7, 8]
// head<Nat>(List)

//-------------------------------------------------------------------------------
// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
    case xs{
      nil: List.nil<A>
      cons: xs.tail
    }
// ex_08:_ 
// let List = [5, 7, 9, 11]
// List.show<Nat>(Nat.show tail<Nat>(List))

//-------------------------------------------------------------------------------

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs{
    nil: 0
    cons: Nat.succ(length<A>(xs.tail))
  }
// ex_08: Nat
// let List = [5, 7, 9, 11]
// length<Nat>(List)

//-------------------------------------------------------------------------------

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
  case xs{
    nil: Maybe.none<A>
    cons: case xs.tail{
      nil: Maybe.some<A>(xs.head)
      cons: last<A>(xs.tail)
    }
  }
// ex_08:_
// let List = [5, 7, 9, 11]
// last<Nat>(List)
//-------------------------------------------------------------------------------

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
  case xs{
    nil: List.nil<A>
    cons: case xs.tail{
      nil: List.nil<A>
      cons: List.cons<A>(xs.head , init<A>(xs.tail))
    }
  }
// ex_08:_
// let List = [5, 7, 9, 11]
// init<Nat>(List)
//-------------------------------------------------------------------------------

// // Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs{
    nil: ys
    cons: List.cons<A>(xs.head , concat<A>(xs.tail , ys))
 }
// ex_08:_
// let List = [5, 6, 7, 8]
// let List2 = [9, 10, 11]
// List.show<Nat>(Nat.show, concat<Nat>(List, List2))

//-------------------------------------------------------------------------------

// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A>
  case n{
    zero: xs
    succ: case xs{
      nil: List.nil<A>
      cons: drop<A>(n.pred , xs.tail)
  }
}
// ex_08:_
// let List = [5, 7, 9, 11]
// List.show<Nat>(Nat.show, drop<Nat>(2 , List))
//-------------------------------------------------------------------------------

// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
  case n{
    zero: List.nil<A>
    succ: case xs{
      nil: List.nil<A>
      cons: List.cons<A>(xs.head , take<A>(n.pred, xs.tail))
    }
  }
// ex_08:_
// let List = [5, 7, 9, 11]
// List.show<Nat>(Nat.show, take<Nat>(2 , List))
//-------------------------------------------------------------------------------

// // Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
   case xs{
     nil: List.nil<B>
    cons: List.cons<B>(fn(xs.head), map<A,B>(fn, xs.tail))
  }
// ex_08:_  
// let List = [5, 6, 7, 8] //lista tipo Nat
// List.show<Nat>(Nat.show, map<Nat, Nat>(Nat.succ , List))
//-------------------------------------------------------------------------------

reverse.go<A: Type>(nova: List<A>, old: List<A>): List<A>
  case old {
    nil: nova
    cons: reverse.go<A>(List.cons<A>(old.head, nova), old.tail)
    }

// ex_08:_  
// let old = [5, 6, 7, 8, 9, 10, 11]  //lista tipo Nat
// let nova = []
// List.show<Nat>(Nat.show, reverse.go<Nat>(nova , old))


// // Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)
// ex_08:_  
// let old = [5, 6, 7, 8, 9, 10, 11]  //lista tipo Nat
// List.show<Nat>(Nat.show, reverse<Nat>(old))

//-------------------------------------------------------------------------------

