// type PairBool
// Contains 2 Booleans inside it
type PairBool { 
  new(fst: Bool, snd: Bool)
}

// Returns the first element of a pair
fstt(x: PairBool): Bool
  case x {
    new: x.fst
  }
// ex_02: Bool
// fstt(PairBool.new(Bool.true , Bool.false))
//------------------------------------------------------------------------------------------------


// Returns the second element of a pair
snd(pair: PairBool): Bool
case pair {
    new: pair.snd
  }
// ex_02: Bool
// snd(PairBool.new(Bool.true , Bool.false))
//------------------------------------------------------------------------------------------------


// Returns true if both elements of a PairBool are identical
eql_elements(a: PairBool): Bool 
  case a{
    new: case a.fst{
      true: a.snd
      false: case a.snd{
              true: Bool.false
              false: Bool.true
      }}}
//ex_02: Bool
//eql_elements(PairBool.new(Bool.true , Bool.true))
//------------------------------------------------------------------------------------------------


// Returns true if both Pairs are equal 
// eql(PairBool.new(false, false), PairBool.new(true, true)) -> false 
// eql(PairBool.new(true, false), PairBool.new(true, false)) -> true
eql(a: PairBool, b: PairBool): Bool
  case a{
    new: case b{
          new: case eql_elements(PairBool.new(a.fst, b.fst)){
                true eql_elements(PairBool.new(a.snd, b.snd))
                  }}}
//ex_02: Bool
//eql(PairBool.new(true, false), PairBool.new(true, false))
//------------------------------------------------------------------------------------------------


// Returns true if both Pairs are different
// eql(PairBool.new(false, false), PairBool.new(true, true)) -> true 
// eql(PairBool.new(true, false), PairBool.new(true, false)) -> false
not_eql(a: PairBool, b: PairBool): Bool
 case eql(a ,b){
   true:Bool.false
   false:Bool.true
 }

//ex:02: Bool
//not_eql(PairBool.new(true, false), PairBool.new(true, false))
//------------------------------------------------------------------------------------------------


// Creates a PairBool from 2 Booleans
create(a: Bool, b: Bool): PairBool
    case a b{
      true true: PairBool.new(true, true)
      true false: PairBool.new(true, false)
      false true: PairBool.new(false true)
      false false: PairBool.new(false false)
    }
//ex_02:_
//create(false, true)
//------------------------------------------------------------------------------------------------

// Inverts the values of a PairBool
// neg(PairBool.new(false, false) -> PairBool.new(true, true)
// neg(PairBool.new(false, true) -> PairBool.new(true, false)
neg(x: PairBool): PairBool
  case x{
    new: case x.fst{
      true: case x.snd{
        true: PairBool.new(false, false)
        false: PairBool.new(false, true)
      }
      false: case x.snd{
        true: PairBool.new(true, false)
        false: PairBool.new(true, true)
    }}
    
// ex_02:_
// neg(PairBool.new(true, false))
//------------------------------------------------------------------------------------------------


// Inverts the 2 elements of a PairBool
swap(pair: PairBool): PairBool 
  case pair {} 
  default PairBool.new(pair.snd pair.fst)    //Monitor Aoki-Kujo me ensinou essa

ex_02:_
swap(PairBool.new(false, true))
