//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

// let a = Bits.i(Bits.i(Bits.e))                  //3
// let b = Bits.o(Bits.i(Bits.i(Bits.e)))          //6
// let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))  //12
// let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))  //15


//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
    case b{
      e: Bool.true
    }
default Bool.false

// ex_07: Bool
// is_empty(Bits.o(Bits.i(Bits.i(Bits.e)))  )
//------------------------------------------------------------------------------------------  

//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  case b{
    e: Bits.e
    o: b.pred
    i: b.pred
  }
// ex_07: Bits
// tail(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) )
//------------------------------------------------------------------------------------------  


//Negates all Bits

//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
notb(b: Bits): Bits
  case b {
    e: Bits.e
    o: Bits.i(notb(b.pred))
    i: Bits.o(notb(b.pred))
    }
// ex_07: Bits
//notb(Bits.i(Bits.i(Bits.o(Bits.o(Bits.e)))))
//------------------------------------------------------------------------------------------  

//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
case b{
  e: Bits.i(Bits.e)
  o: Bits.i(b.pred)
  i: Bits.o(inc(b.pred))
  }

// ex_07:Bits
// inc(Bits.o(Bits.o(Bits.i(Bits.e))))
//------------------------------------------------------------------------------------------  

//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  case b{
    e: Bits.e
    o: Bits.i(dec(b.pred))
    i: case b{
      e: Bits.e
    }default Bits.o(b.pred)
  }
  // ex_07: Bits
  // dec(Bits.i(Bits.o(Bits.i(Bits.e))))
//------------------------------------------------------------------------------------------  


//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
    case a{
      e: b
      o: Bits.o(concat(a.pred , b))
      i: Bits.i(concat(a.pred , b))
    }
// ex_07: Bits
// concat(Bits.i(Bits.o(Bits.e)), Bits.i(Bits.o(Bits.e)))
//------------------------------------------------------------------------------------------  

//Adds two Bits structures

//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.o(Bits.e))))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.o(Bits.i(Bits.e))))))
add(a: Bits, b: Bits): Bits 
    case a{
      e: b     
      o: case b{                                       
        e: a                           
        o: Bits.o(add(a.pred , b.pred))              
        i: Bits.i(add(a.pred , b.pred))
      }         
      i: case b{
        e: a
        o: Bits.i(add(a.pred , b.pred))          
        i: Bits.o(inc(add(a.pred , b.pred)))  
      }
    }                                     
                                                     
// ex_07: Bits
// let a = Bits.i(Bits.i(Bits.e))                  //3
// let b = Bits.o(Bits.i(Bits.i(Bits.e)))          //6
// let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))  //12
// let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))  //15
//       //Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))))
// add(Nat.to_bits(7), Nat.to_bits(21))
//------------------------------------------------------------------------------------------  

//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
    case a{
      e: case b{
        e: Bits.e
        o: Bits.o(and(a , b.pred))
        i: Bits.o(and(a , b.pred))
      }
      o: case b{
        e: Bits.o(and(a.pred, b))
        o: Bits.o(and(a.pred, b.pred))
        i: Bits.o(and(a.pred, b.pred))
      }
      i: case b{
        e: Bits.o(and(a.pred, b))
        o: Bits.o(and(a.pred, b.pred))
        i: Bits.i(and(a.pred, b.pred))
      }
    }
//ex_07: Bits
//and(Bits.o(Bits.i(Bits.o(Bits.e))), Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))))
//------------------------------------------------------------------------------------------  


//Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a b{
    e e: Bits.e
    o e: Bits.o(or(a.pred, b))
    i e: Bits.i(or(a.pred, b))
    e o: Bits.o(or(a, b.pred))
    o o: Bits.o(or(a.pred, b.pred))
    i o: Bits.i(or(a.pred, b.pred))
    e i: Bits.i(or(a, b.pred))
    o i: Bits.i(or(a.pred, b.pred))
    i i: Bits.i(or(a.pred, b.pred))
  }
// ex_07: Bits
// let a = Bits.i(Bits.i(Bits.e))                  //3
// let b = Bits.o(Bits.i(Bits.i(Bits.e)))          //6
// let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))  //12
// let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))  //15
// or(b,c)


//------------------------------------------------------------------------------------------  

//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
    case a b {
      e e: Bool.true
      o o: eql(a.pred, b.pred)
      i i: eql(a.pred, b.pred)
    } default Bool.false

// ex_07: Bool
// let a = Bits.i(Bits.i(Bits.e))                  //3
// let b = Bits.o(Bits.i(Bits.i(Bits.e)))          //6
// let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))  //12
// let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))  //15
// eql(a, b)
//------------------------------------------------------------------------------------------  

//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
    case b{
      e: acum
      o: reverse_go(b.pred , Bits.o(acum))
      i: reverse_go(b.pred , Bits.i(acum))
      }

// ex_07: Bits
// reverse_go(Bits.reverse_go(Bits.read(1010)), Bits.e)


//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)

//------------------------------------------------------------------------------------------ 


//Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
    case bs{
      e: acum
      o: length_go(bs.pred , Nat.succ(acum))
      i: length_go(bs.pred , Nat.succ(acum))
      }

// ex_07:Nat
// let a = Bits.i(Bits.i(Bits.e))                  //3
// let b = Bits.o(Bits.i(Bits.i(Bits.e)))          //6
// let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))  //12
// let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))  //15

//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> 4
length(bs: Bits): Nat
length_go(b, 0)

//------------------------------------------------------------------------------------------ 

//Multiplies two Bits structures

addNat(a: Nat, b: Nat): Nat
  case a{
    zero: b
    succ: case b{
           zero: a
           succ: Nat.succ(Nat.succ(addNat(a.pred, b.pred)))    
          }
  }

mulNat(a: Nat, b: Nat): Nat
  case a {
    zero: Nat.zero
    succ: case b{
          zero: Nat.zero
          //      add|    a        |  b
          succ: addNat(mulNat(a.pred, b), b) 
    }
  }

mul(a: Bits, b: Bits): Bits
  let aa = Bits.to_nat(a)
  let bb = Bits.to_nat(b)
  Nat.to_bits(mulNat(aa, bb))
  
   
//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
// mul(a: Bits, b: Bits): Bits
  // mul_go(a, b, Bits.e)

ex_07: Bits

  let a = Bits.i(Bits.i(Bits.e)) //3
  let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
  let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
  let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

  mul(b,c) 


//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
// mul(a: Bits, b: Bits): Bits
//   mul_go(a, b, Bits.e)

//------------------------------------------------------------------------------------------ 

//Drops a n Number of Bits starting from from the least significative bit

//drop(a) -> Bits.i(Bits.e)
//drop(b) -> Bits.i(Bits.i(Bits.e))
//drop(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
  case n{
    zero: bs
    succ: case bs{
      e: Bits.e
    } defaul drop(n.pred, bs.pred)
  }
//ex_07: Bits

//------------------------------------------------------------------------------------------ 

//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

// let a = Bits.i(Bits.i(Bits.e))                  //3
// let b = Bits.o(Bits.i(Bits.i(Bits.e)))          //6
// let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))  //12
// let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))  //15

take(n: Nat, bs: Bits): Bits
  case n{
    zero: Bits.e
    succ: case bs{
      e: bs
      o: Bits.o(take(n.pred, bs.pred))
      i: Bits.i(take(n.pred, bs.pred))
    }
  }
//ex_07: Bits
//take(3, Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))
//------------------------------------------------------------------------------------------ 

